vertfile``base2``
```glsl
/*
A fragment shader that visualizes the logarithmic function in the complex plane.
It is expanded bit by bit from its Taylor series to generate an animation.
See https://en.wikipedia.org/wiki/Taylor_series#Natural_logarithm for more information.
*/
#version 450

// Include some complex number functions
#extension GL_GOOGLE_include_directive : require
#include "math/complex.glsl"

layout(location = 0) in vec2 inCoord;
layout(location = 0) out vec4 outColor;
layout(binding = 1) uniform UBO
{
	float time; // t from 1.0 to 11.0
	float random; // individual random value between 0.0 and 1.0 for each frame (unused)
} constants;

// Taylor series expansion of ln(x+1) from n=1 to n=steps
vec2 cln(const in vec2 x, const in int steps)
{
	vec2 res = vec2(0.0);
	for(int i=1; i<=steps; i++)
	{
		res += (i%2==0?-1.0:1.0) * (cpow(x, i)/float(i));
	}
	return res;
}

void main()
{
	vec2 x = inCoord*2.5; // no zoom here :( all the action is happening around the center
	vec2 y = cln(x, int(constants.time));

	outColor = vec4(ccolor(y), 1.0);
}
```
animated 300 10 1.0 31.0 1M
